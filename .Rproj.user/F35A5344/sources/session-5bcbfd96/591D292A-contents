family = categorical(),
cores = 4,
seed = 1229,
iter = 6000,
control = list(max_treedepth = 20, adapt_delta = 0.95),
file = "cache/ss_and_consonants_with_macroarea"
)
# if using macroarea as interactive predictor:
ss_and_consonants_with_macroarea <- brm(
formula = value ~ ConsonantCount*macroarea,
data = data,
family = categorical(),
cores = 4,
seed = 1229,
iter = 6000,
control = list(max_treedepth = 20, adapt_delta = 0.95),
file = "cache/ss_and_consonants_with_macroarea"
)
conditional_effects(ss_and_consonants_with_macroarea, categorical=TRUE)
conditional_effects(ss_and_consonants_with_macroarea, conditions=TRUE)
conditional_effects(ss_and_consonants_with_macroarea)
conditional_effects(ss_and_consonants_with_macroarea, categorical=TRUE)
conditional_effects(ss_and_consonants_with_macroarea, categorical=TRUE，
conditional_effects(ss_and_consonants_with_macroarea, categorical=TRUE,
conditions = list(macroarea = "Africa"))
conditional_effects(ss_and_consonants_with_macroarea,
conditions = list(macroarea = "Africa"))
conditional_effects(ss_and_consonants_with_macroarea,categorical=TRUE,
conditions=list(macroarea = "Africa"))
df_new <- data.frame(
ConsonantCount = seq(min(data$ConsonantCount), max(data$ConsonantCount), length.out = 100),
macroarea = "Africa"
)
predictions <- predict(ss_and_consonants_with_macroarea, newdata = df_new, re_formula = NA)
plot(df_new$ConsonantCount, predictions)
# if using macroarea as interactive predictor:
ss_and_consonants_with_macroarea <- brm(
formula = value ~ ConsonantCount*macroarea,
plot(df_new$ConsonantCount, predictions[,1])
df_new <- data.frame(
df_new <- data.frame(
ConsonantCount = seq(min(data$ConsonantCount), max(data$ConsonantCount), length.out = 100),
macroarea = "Africa"
)
predictions <- predict(ss_and_consonants_with_macroarea, newdata = df_new, re_formula = NA)
plot(df_new$ConsonantCount, predictions[,1])
df_new <- data.frame(
ConsonantCount = seq(min(data$ConsonantCount), max(data$ConsonantCount), length.out = 100),
macroarea = "Africa"
)
predictions <- predict(ss_and_consonants_with_macroarea, newdata = df_new, re_formula = NA)
df_plot <- data.frame(ConsonantCount = df_new$ConsonantCount,
Class1 = predictions[,1],
Class2 = predictions[,2],
Class3 = predictions[,3])
df_long <- tidyr::pivot_longer(df_plot, cols = c(Class1, Class2, Class3),
names_to = "Class", values_to = "Probability")
ggplot(df_long, aes(x = ConsonantCount, y = Probability, color = Class)) +
geom_line() +
labs(title = "Predicted Probabilities Across Classes",
x = "Consonant Count",
y = "Probability") +
theme_minimal()
summary(ss_and_consonants_with_macroarea)
summary(ss_and_consonants)
View(data)
summary(ss_and_consonants_with_macroarea)
df_new <- data.frame(
ConsonantCount = seq(min(data$ConsonantCount), max(data$ConsonantCount), length.out = 100),
macroarea = "Papunesia"
)
predictions <- predict(ss_and_consonants_with_macroarea, newdata = df_new, re_formula = NA)
df_plot <- data.frame(ConsonantCount = df_new$ConsonantCount,
Class1 = predictions[,1],
Class2 = predictions[,2],
Class3 = predictions[,3])
df_long <- tidyr::pivot_longer(df_plot, cols = c(Class1, Class2, Class3),
names_to = "Class", values_to = "Probability")
ggplot(df_long, aes(x = ConsonantCount, y = Probability, color = Class)) +
geom_line() +
labs(title = "Predicted Probabilities Across Classes",
x = "Consonant Count",
y = "Probability") +
theme_minimal()
summary(ss_and_consonants_with_macroarea)
df_new <- data.frame(
ConsonantCount = seq(min(data$ConsonantCount), max(data$ConsonantCount), length.out = 100),
macroarea = "Papunesia"
)
predictions <- predict(ss_and_consonants_with_macroarea, newdata = df_new, re_formula = NA)
df_plot <- data.frame(ConsonantCount = df_new$ConsonantCount,
Simple = predictions[,1],
Moderately_complex = predictions[,2],
Complex = predictions[,3])
df_long <- tidyr::pivot_longer(df_plot, cols = c(Class1, Class2, Class3),
names_to = "Class", values_to = "Probability")
summary(ss_and_consonants_with_macroarea)
df_new <- data.frame(
ConsonantCount = seq(min(data$ConsonantCount), max(data$ConsonantCount), length.out = 100),
macroarea = "Papunesia"
)
predictions <- predict(ss_and_consonants_with_macroarea, newdata = df_new, re_formula = NA)
df_plot <- data.frame(ConsonantCount = df_new$ConsonantCount,
Simple = predictions[,1],
Moderately_complex = predictions[,2],
Complex = predictions[,3])
df_long <- tidyr::pivot_longer(df_plot, cols = c(Simple, Moderately_complex, Complex),
names_to = "Class", values_to = "Probability")
ggplot(df_long, aes(x = ConsonantCount, y = Probability, color = Class)) +
geom_line() +
labs(title = "Predicted Probabilities Across Classes",
x = "Consonant Count",
y = "Probability") +
theme_minimal()
summary(ss_and_consonants)
summary(ss_and_cvratio)
conditional_effects(ss_and_cvratio, categorical = TRUE)
conditional_effects(ss_and_consonants, categorical = TRUE)
View(data)
eurasia_data <- data |>
filter(macroarea == 'Eurasia')
View(eurasia_data)
eurasia_data <- data |>
filter(macroarea == 'Eurasia') |>
group_by('family')
View(eurasia_data)
eurasia_data <- data |>
filter(macroarea == 'Eurasia') |>
group_by('family') |>
summarise(count = n(), .groups = "drop")
View(eurasia_data)
eurasia_data <- data |>
filter(macroarea == 'Eurasia') |>
group_by(family) |>
summarise(count = n(), .groups = "drop")
View(eurasia_data)
eurasia_data <- data |>
filter(macroarea == 'Eurasia') |>
group_by(family) |>
summarise(count = n(), .groups = "drop") |>
arrange(count)
eurasia_data <- data |>
filter(macroarea == 'Eurasia') |>
group_by(family) |>
summarise(count = n(), .groups = "drop") |>
arrange(desc(count))
library(tidyverse)
library(brms)
data <- readRDS("./data.rds")
data$value <- factor(data$value, levels = c("Simple", "Moderately complex", "Complex"))
# check the correlation between number of consonants and
# complexity of syllable structure
ss_and_consonants <- brm(
formula = value ~ 0 + ConsonantCount,
data = data,
family = categorical(),
cores = 4,
seed = 1229,
file = "cache/ss_and_consonants"
)
summary(ss_and_consonants)
conditional_effects(ss_and_consonants, categorical = TRUE)
# if using macroarea as interactive predictor:
ss_and_consonants_with_macroarea <- brm(
formula = value ~ 0 + ConsonantCount*macroarea,
data = data,
family = categorical(),
cores = 4,
seed = 1229,
iter = 6000,
control = list(max_treedepth = 20, adapt_delta = 0.95),
file = "cache/ss_and_consonants_with_macroarea"
)
summary(ss_and_consonants_with_macroarea)
############
plot_predictions_for_macroarea <- function(macroarea_name, model, full_data) {
# 提取特定macroarea的数据
data_sub <- full_data[full_data$macroarea == macroarea_name,]
# 预测
predictions <- predict(model, newdata = data_sub, re_formula = NA)
# 准备可用于绘图的数据框
df_plot <- data.frame(ConsonantCount = data_sub$ConsonantCount,
Class1 = predictions[,1],
Class2 = predictions[,2],
Class3 = predictions[,3])
df_long <- tidyr::pivot_longer(df_plot, cols = c(Class1, Class2, Class3),
names_to = "Class", values_to = "Probability")
# 生成图形
p <- ggplot(df_long, aes(x = ConsonantCount, y = Probability, color = Class)) +
geom_line() +
labs(title = paste("Predicted Probabilities in", macroarea_name),
x = "Consonant Count", y = "Probability") +
theme_minimal()
# 保存图形
ggsave(paste0("Predictions_", macroarea_name, ".png"), plot = p, width = 10, height = 6)
return(p)
}
for (macro in unique(data$macroarea)) {
plot_predictions_for_macroarea(macro, ss_and_consonants_with_macroarea,
data)
}
############
plot_predictions_for_macroarea <- function(macroarea_name, model, full_data) {
# 提取特定macroarea的数据
data_sub <- full_data[full_data$macroarea == macroarea_name,]
# 预测
predictions <- predict(model, newdata = data_sub, re_formula = NA)
# 准备可用于绘图的数据框
df_plot <- data.frame(ConsonantCount = data_sub$ConsonantCount,
Simple = predictions[,1],
ModeratelyComplex = predictions[,2],
Complex = predictions[,3])
df_long <- pivot_longer(df_plot, cols = c(Simple, ModeratelyComplex, Complex),
names_to = "Class", values_to = "Probability")
# 生成图形
p <- ggplot(df_long, aes(x = ConsonantCount, y = Probability, color = Class)) +
geom_line() +
labs(title = paste("Predicted Probabilities in", macroarea_name),
x = "Consonant Count", y = "Probability") +
theme_minimal()
# 保存图形
ggsave(paste0("Predictions_", macroarea_name, ".png"), plot = p, width = 10, height = 6)
return(p)
}
for (macro in unique(data$macroarea)) {
plot_predictions_for_macroarea(macro, ss_and_consonants_with_macroarea,
data)
}
data$value <- factor(data$value, levels = c("Simple", "Moderately complex", "Complex"))
for (macro in unique(data$macroarea)) {
plot_predictions_for_macroarea(macro, ss_and_consonants_with_macroarea,
data)
}
data$value <- factor(data$value, levels = c("Simple", "Moderately complex", "Complex"))
plot_predictions_for_macroarea <- function(macroarea_name, model, full_data) {
# 提取特定macroarea的数据
data_sub <- full_data[full_data$macroarea == macroarea_name,]
# 预测
predictions <- predict(model, newdata = data_sub, re_formula = NA)
# 准备可用于绘图的数据框
df_plot <- data.frame(ConsonantCount = data_sub$ConsonantCount,
Simple = predictions[,1],
ModeratelyComplex = predictions[,2],
Complex = predictions[,3])
df_long <- pivot_longer(df_plot, cols = c(Simple, ModeratelyComplex, Complex),
names_to = "Class", values_to = "Probability")
# 生成图形
p <- ggplot(df_long, aes(x = ConsonantCount, y = Probability, color = Class)) +
geom_line() +
labs(title = paste("Predicted Probabilities in", macroarea_name),
x = "Consonant Count", y = "Probability") +
theme_minimal()
# 保存图形
ggsave(paste0("Predictions_", macroarea_name, ".png"), plot = p, width = 10, height = 6)
return(p)
}
for (macro in unique(data$macroarea)) {
plot_predictions_for_macroarea(macro, ss_and_consonants_with_macroarea,
data)
}
data <- readRDS("./data.rds")
data$value <- factor(data$value, levels = c("Simple", "Moderately complex", "Complex"))
ss_and_CVRatio <- brm(
formula = value ~ 0 + CVRatio,
data = data,
family = categorical(),
cores = 4,
seed = 1229,
file = "cache/ss_and_CVRatio"
)
library(brms)
library(tidyverse)
ss_and_CVRatio <- brm(
formula = value ~ 0 + CVRatio,
data = data,
family = categorical(),
cores = 4,
seed = 1229,
file = "cache/ss_and_CVRatio"
)
ss_and_CVRatio_with_macroarea <- brm(
formula = value ~ 0 + CVRatio*macroarea,
data = data,
family = categorical(),
cores = 4,
seed = 1229,
iter = 6000,
control = list(max_treedepth = 20, adapt_delta = 0.95),
file = "cache/ss_and_CVRatio_with_macroarea"
)
ss_and_CVRatio_with_macroarea <- brm(
formula = value ~ 0 + CVRatio*macroarea,
data = data,
family = categorical(),
cores = 4,
seed = 1229,
iter = 6000,
control = list(max_treedepth = 20, adapt_delta = 0.95),
file = "cache/ss_and_CVRatio_with_macroarea"
)
ss_and_CVRatio_with_macroarea <- brm(
formula = value ~ 0 + CVRatio*macroarea,
data = data,
family = categorical(),
cores = 4,
seed = 1117,
iter = 6000,
control = list(max_treedepth = 20, adapt_delta = 0.95),
file = "cache/ss_and_CVRatio_with_macroarea"
)
library(ritwals)
library(ritwals)
Syllable_Structure <- get_feature('12A', data = WALS)
library(tidyverse)
phoible <- read.csv('./phoible.csv')
View(Syllable_Structure)
View(Syllable_Structure)
phoible <- phoible[is.na(phoible$SpecificDialect)]
phoible <- phoible[is.na(phoible$SpecificDialect),]
install.packages("lingtypology")
install.packages("remotes")
remotes::install_github("ropensci/lingtypology")
phoible$LanguageName <- tolower(phoible$LanguageName)
phoible <- phoible |>
distinct(Glottocode, LanguageName, Phoneme, .keep_all = TRUE)
cons_count <- phoible |>
filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n()) |>
mutate(ConsonantCount = count)
View(cons_count)
cons_count <- phoible |>
filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'drop') |>
mutate(ConsonantCount = count)
cons_count <- cons_count[c('Glottocode', 'LanguageName', 'ConsonantCount')]
View(cons_count)
cons_count <- phoible |>
filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'drop') |>
mutate(ConsonantCount = count)
# cons_count <- cons_count[c('Glottocode', 'LanguageName', 'ConsonantCount')]
View(cons_count)
cons_count <- phoible |>
filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'keep') |>
mutate(ConsonantCount = count)
# cons_count <- cons_count[c('Glottocode', 'LanguageName', 'ConsonantCount')]
View(cons_count)
cons_count <- phoible |>
filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'drop') |>
mutate(ConsonantCount = count)
cons_count <- cons_count[c('Glottocode', 'LanguageName', 'ConsonantCount')]
install.packages(conflicted)
install.packages('conflicted')
phoible <- phoible |>
distinct(Glottocode, LanguageName, Phoneme, .keep_all = TRUE)
cons_count <- phoible |>
dplyr::filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'drop') |>
mutate(ConsonantCount = count)
cons_count <- cons_count[c('Glottocode', 'LanguageName', 'ConsonantCount')]
View(phoible)
library(conflicted) # Use the conflicted package to force all conflicts to become errors
library(tidyverse)
phoible <- read.csv('./phoible.csv')
View(phoible)
phoible <- phoible[is.na(phoible$SpecificDialect),]
phoible <- phoible |>
distinct(Glottocode, LanguageName, Phoneme, .keep_all = TRUE)
cons_count <- phoible |>
dplyr::filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'drop') |>
mutate(ConsonantCount = count)
cons_count <- cons_count[c('Glottocode', 'LanguageName', 'ConsonantCount')]
View(cons_count)
# Convert all the language names into lowercase.
Syllable_Structure$language <- tolower(Syllable_Structure$language)
phoible$LanguageName <- tolower(phoible$LanguageName)
phoible <- phoible |>
distinct(Glottocode, LanguageName, Phoneme, .keep_all = TRUE)
phoible <- phoible[is.na(phoible$SpecificDialect),]
phoible <- phoible |>
distinct(Glottocode, LanguageName, Phoneme, .keep_all = TRUE)
cons_count <- phoible |>
dplyr::filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'drop') |>
mutate(ConsonantCount = count)
cons_count <- cons_count[c('Glottocode', 'LanguageName', 'ConsonantCount')]
# Convert all the language names into lowercase.
Syllable_Structure$language <- tolower(Syllable_Structure$language)
phoible$LanguageName <- tolower(phoible$LanguageName)
languages_data <- inner_join(Syllable_Structure, cons_count,
by = cc("language" = "LanguageName", "Glottocode")) |>
drop_na()
# Convert all the language names into lowercase.
Syllable_Structure$language <- tolower(Syllable_Structure$language)
phoible$LanguageName <- tolower(phoible$LanguageName)
languages_data <- inner_join(Syllable_Structure, cons_count,
by = c("language" = "LanguageName", "Glottocode")) |>
drop_na()
# Convert all the language names into lowercase.
Syllable_Structure$language <- tolower(Syllable_Structure$language)
phoible$LanguageName <- tolower(phoible$LanguageName)
languages_data <- inner_join(Syllable_Structure, cons_count, by = c("language" = "LanguageName", "glottocode" == "Glottocode")) |>
drop_na()
# Convert all the language names into lowercase.
Syllable_Structure$language <- tolower(Syllable_Structure$language)
phoible$LanguageName <- tolower(phoible$LanguageName)
languages_data <- inner_join(Syllable_Structure, cons_count, by = c("language" = "LanguageName", "glottocode" = "Glottocode")) |>
drop_na()
View(phoible)
View(languages_data)
# Convert all the language names into lowercase.
Syllable_Structure$language <- tolower(Syllable_Structure$language)
phoible$LanguageName <- tolower(phoible$LanguageName)
languages_data <- inner_join(Syllable_Structure, cons_count, by = c("language" = "LanguageName", "glottocode" = "Glottocode")) |>
drop_na()
languages_data <- languages_data |>
mutate(complexity = value) |>
dplyr::select(-value) # use a more recognizable name
cons_count <- phoible |>
dplyr::filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'drop') |>
mutate(consonant_count = count)
cons_count <- cons_count[c('Glottocode', 'LanguageName', 'ConsonantCount')]
library(conflicted) # Use the conflicted package to force all conflicts to become errors
library(tidyverse)
phoible <- read.csv('./phoible.csv')
phoible <- phoible[is.na(phoible$SpecificDialect),]
phoible <- phoible |>
distinct(Glottocode, LanguageName, Phoneme, .keep_all = TRUE)
cons_count <- phoible |>
dplyr::filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'drop') |>
mutate(consonant_count = count)
cons_count <- cons_count[c('Glottocode', 'LanguageName', 'ConsonantCount')]
phoible <- phoible[is.na(phoible$SpecificDialect),]
phoible <- phoible[is.na(phoible$SpecificDialect),]
phoible <- phoible |>
distinct(Glottocode, LanguageName, Phoneme, .keep_all = TRUE)
cons_count <- phoible |>
dplyr::filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'drop') |>
mutate(consonant_count = count)
cons_count <- cons_count[c('Glottocode', 'LanguageName', 'consonant_count')]
# Convert all the language names into lowercase.
Syllable_Structure$language <- tolower(Syllable_Structure$language)
phoible$LanguageName <- tolower(phoible$LanguageName)
languages_data <- inner_join(Syllable_Structure, cons_count, by = c("language" = "LanguageName", "glottocode" = "Glottocode")) |>
drop_na()
languages_data <- languages_data |>
mutate(complexity = value) |>
dplyr::select(-value) # use a more recognizable name
View(languages_data)
phoible <- phoible |>
distinct(Glottocode, LanguageName, Phoneme, .keep_all = TRUE)
cons_count <- phoible |>
dplyr::filter(SegmentClass == 'consonant') |>
group_by(Glottocode, LanguageName, SegmentClass) |>
summarise(count = n(), .groups = 'drop') |>
mutate(consonant_count = count)
cons_count <- cons_count[c('Glottocode', 'LanguageName', 'consonant_count')]
# Convert all the language names into lowercase.
Syllable_Structure$language <- tolower(Syllable_Structure$language)
phoible$LanguageName <- tolower(phoible$LanguageName)
languages_data <- inner_join(Syllable_Structure, cons_count, by = c("language" = "LanguageName", "glottocode" = "Glottocode")) |>
drop_na()
languages_data <- languages_data |>
mutate(complexity = value) |>
dplyr::select(-value) # use a more recognizable name
average_consonants <- languages_data |>
group_by(complexity) |>
summarise(average_consonants = mean(consonant_count))
View(average_consonants)
average_consonants <- languages_data |>
group_by(complexity) |>
summarise(average_consonants = mean(consonant_count))
languages_data |> group_by(complexity) |>
summarise(average_consonants = mean(consonant_count))
# Convert all the language names into lowercase.
Syllable_Structure$language <- tolower(Syllable_Structure$language)
phoible$LanguageName <- tolower(phoible$LanguageName)
languages_data <- inner_join(Syllable_Structure, cons_count, by = c("language" = "LanguageName", "glottocode" = "Glottocode")) |>
drop_na()
languages_data <- languages_data |>
mutate(complexity = value) |>
dplyr::select(-value) # use a more recognizable name
languages_data$complexity <- factor(data$complexity, levels = c("Simple", "Moderately complex", "Complex")) # set a more reasonable order of values
# Convert all the language names into lowercase.
Syllable_Structure$language <- tolower(Syllable_Structure$language)
phoible$LanguageName <- tolower(phoible$LanguageName)
languages_data <- inner_join(Syllable_Structure, cons_count, by = c("language" = "LanguageName", "glottocode" = "Glottocode")) |>
drop_na()
languages_data <- languages_data |>
mutate(complexity = value) |>
dplyr::select(-value) # use a more recognizable name
languages_data$complexity <- factor(languages_data$complexity, levels = c("Simple", "Moderately complex", "Complex")) # set a more reasonable order of values
languages_data |> group_by(complexity) |>
summarise(average_consonants = mean(consonant_count))
View(Syllable_Structure)
